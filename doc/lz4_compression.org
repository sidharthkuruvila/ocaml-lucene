#+TITLE: LZ4 Compression

#+begin_src ocaml :exports none
  #require "core";;
  #require "hex";;
  open Core
#+end_src

#+RESULTS:
: /Users/sidharth/.opam/4.14.0/lib/cstruct: added to search path
: /Users/sidharth/.opam/4.14.0/lib/cstruct/cstruct.cma: loaded
: /Users/sidharth/.opam/4.14.0/lib/hex: added to search path
: /Users/sidharth/.opam/4.14.0/lib/hex/hex.cma: loaded


#+begin_src ocaml :exports none
  module Reader = struct
    type t = {
        mutable idx: int;
        bytes: String.t
      };;
    let of_string s = { idx = 0; bytes = s  };;

    let read_byte data = begin
        let { idx; bytes } = data in
        let r = String.get bytes idx in
        data.idx <- idx + 1;
        r |> int_of_char
      end
    let read_n_bytes data n =
      let {idx; bytes } = data in
      let s =  String.sub ~pos:idx ~len:n bytes in
      data.idx <- idx + n;
      s
    let read_u16_le data =
      let b1 = read_byte data in
      let b2 = read_byte data in
      (b2 lsr 8) lor b1
  end
#+end_src

#+RESULTS:
: module Reader :
:   sig
:     type t = { mutable idx : int; bytes : Core.String.t; }
:     val of_string : Core.String.t -> t
:     val read_byte : t -> int
:     val read_n_bytes : t -> int -> Core.String.t
:     val read_u16_le : t -> int
:   end


* The LZ4 block format

[[https://github.com/lz4/lz4/blob/dev/doc/lz4_Block_format.md][LZ4 Block Format Description]].


An lz4 compressed *block* contains multiple *sequences*. Each *sequence* can contain two parts. A literal string which can be copied into the output. And a *match* which points to a substring in the uncompressed output.


#+BEGIN_SRC dot :file images/lz4-compressed-block.png :exports results
  graph {
    rankdir="TB";
    rank="same";
    n [
     shape="record";
     label="
       {
        match_length_nibble: u4 |
        literal_length_nibble: u4 |
        literal_length_bytes: byte* |
        literal: byte[literal_length] |
        offset: u16 |
        match_length_bytes: byte*
       }
     "
    ]
  }
#+END_SRC

#+RESULTS:
[[file:images/lz4-compressed-block.png]]

A sequence starts with a *token* byte that contains two 4 bit nibbles.  The lower bits contain the literal's length. Literals of lengths 14 bytes and less can be represented by the nibble. Longer lengths require additional length bytes.

#+begin_src ocaml
  let rec read_length_bytes data =
    let b = Reader.read_byte data in
    if b < 255 then
      b
    else
      b + read_length_bytes data

  let read_length length_nibble data =
    if length_nibble < 15 then
      length_nibble
    else
      length_nibble + read_length_bytes data

#+end_src

#+RESULTS:
: <fun>

If the value of the length nibble is less than 15 no extra bytes are required.

#+begin_src ocaml :exports both
  read_length 14 (Reader.of_string "")
#+end_src

#+RESULTS:
: 14


If the length nibble is 15 an extra byte will be read and added to the total length.

#+begin_src ocaml :exports both
  read_length 15 (Reader.of_string "\x00")
#+end_src

#+RESULTS:
: 15

If the byte read is 255 then 255 is added to the total length and an extra byte is read.

#+begin_src ocaml :exports both
  read_length 15 (Reader.of_string "\xFF\x03")
#+end_src

#+RESULTS:
: 273

Once the length of the lteral is calculated the bytes can be copied from the sequence and appended onto the uncompressed buffer.

#+begin_src ocaml
  let copy_literal data length buffer =
    let bytes = Reader.read_n_bytes data length in
    Buffer.add_string buffer bytes
#+end_src

#+RESULTS:
: <fun>

#+begin_src ocaml :exports both
  let buffer = Buffer.create 0;;
  let data = Reader.of_string "copied literal";;
  copy_literal data 14 buffer;;
  Buffer.contents buffer
#+end_src

#+RESULTS:
: copied literal

The second part of the sequence is the match. The match copies bytes from the uncompressed buffer and appends them to the bufffer. The bytes are copied from an offest up to 65535 bytes before the current end of the buffer. The match length is calculated in a similar manner to the literal length, using extra match lenght bytes if required.

#+begin_src ocaml
  let copy_match match_length_nibble data buffer =
    let offset = Reader.read_u16_le data in
    let match_length = read_length match_length_nibble data in
    let matched = Buffer.sub buffer ~pos:(Buffer.length buffer - offset) ~len:match_length |> Bytes.to_string in
    Buffer.add_string buffer matched
#+end_src

#+RESULTS:
: <fun>

#+begin_src ocaml :exports both
  let buffer = Buffer.create 0;;
  Buffer.add_string buffer "copied match bytes ";;
  let data = Reader.of_string "\x13\x00\x03";;
  copy_match 15 data buffer;;
  Buffer.contents buffer
#+end_src

#+RESULTS:
: copied match bytes copied match bytes

* Compression

Compression works by finding matching substrings. A hashtable can speed up the search of substrings.


#+begin_src dot :file images/lz4-compression.png :exports results
  digraph {

        hash_table [
         shape = record;
         label="{hash_table|nil|<hash1>0|nil} "
        ];


        compressed [
          shape = record;
          label = "{Compressed Segments |{ {Literal | <literal1>catamaran and | <literal2>s end} | { Match Offset | <start_index1>14 | 0} |{Match Length | <end_index1>9 | 0}}}"
        ];


        uncompressed [
          shape = record;
          label = "{{<index0>c|a|t|a|m|a|r|a|<index8>n| |a|n|d| |<index14>c|a|t|a|m|a|r|a|<index23>n|<index24>s| |e|n|d}}"
        ];

        hash_table:hash1 -> uncompressed:index0;
        compressed:start_index1-> uncompressed:index14;
        compressed:end_index1 -> uncompressed:index23;
        compressed:literal1 -> uncompressed:index0;
        compressed:literal2 -> uncompressed:index24;

  }

#+end_src

#+RESULTS:
[[file:images/lz4-compression.png]]

In the example the entry in the hash table for the string "cata" points to index 0. The literal "catamaran and " is copied into the first sequence, The prefix "cata" is found in the hash and the string "catamaran" matches the string at index 0. It is used t construct the hash. "s end" is a five character literal that marks the end of the block.


